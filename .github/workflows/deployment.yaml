name: Deploy Applications

on:
  push:
    branches:
      - main
    paths:
      - 'docker-compose.prod.yml'
      - '.github/workflows/**'
      - 'backend/**'
      - 'odds-predictor/**'
      - 'scraper/**'
      - 'backup/**'
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app:
#          - backend
          - backup
          - odds-predictor
          - scraper
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: gdmurray/mma-oracle-${{ matrix.app }}:latest
          platforms: linux/arm64
          context: ${{ matrix.app }}
          build-args: BUILDKIT_INLINE_CACHE=1
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        id: docker_build

      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Execute SSH commands
        uses: appleboy/ssh-action@master
        with:
          host: "${{ secrets.SSH_HOST }}"
          username: "app"
          passphrase: "${{ secrets.SSH_PASSPHRASE }}"
          key: "${{ secrets.SSH_PRIVATE_KEY }}"
          script: |
            echo "Creating .env file..."
            # Create or overwrite an existing .env file with the environment variables
            cat > ~/mma-oracle/.env << EOF
            ME_CONFIG_BASICAUTH=true
            ME_CONFIG_MONGODB_ADMINUSERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
            ME_CONFIG_MONGODB_ADMINPASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
            ME_CONFIG_BASICAUTH_PASSWORD=${{ secrets.ME_CONFIG_BASICAUTH_PASSWORD }}
            ME_CONFIG_BASICAUTH_USERNAME=${{ secrets.ME_CONFIG_BASICAUTH_USERNAME }}
            ME_CONFIG_MONGODB_URL="mongodb://${{ secrets.MONGO_INITDB_ROOT_USERNAME }}:${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}@mongodb:27017/?authSource=admin"
            MONGODB_NAME=${{ secrets.MONGODB_NAME }}
            MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}
            MONGODB_USER=${{ secrets.MONGODB_USER }}
            MONGO_INITDB_DATABASE=${{ secrets.MONGODB_NAME }}
            MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
            MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            NODE_ENV=production
            FLASK_ENV=production
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}
            EOF
            
            echo ".env file created with secrets."
            
            cd ~/mma-oracle
            
            eval "$(ssh-agent -s)"
            ssh-add ~/.ssh/mma-oracle-github-deploy-key
            git reset --hard HEAD
            git pull origin main
            
            # Pull the latest images
            docker-compose -f docker-compose.prod.yml pull
            
            # Interpolate .env file and deploy the stack
            # The <(...) syntax creates a temporary file from the output of docker-compose config which docker stack deploy can use
            docker stack deploy -c <(docker-compose -f docker-compose.prod.yml config | sed -E 's/published: "([0-9]+)"/published: \1/' | sed '/^name: mma-oracle/d') mmaoracle
